{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "MajorProject.ipynb",
      "provenance": [],
      "collapsed_sections": [
        "WQI7LiIoUJQp",
        "43m20-CpvtPq",
        "70fwZP18A1Lr",
        "NuL8gXinV528",
        "9Ebr6X2UWJqD",
        "prwgR8GmgdsM"
      ]
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WQI7LiIoUJQp"
      },
      "source": [
        "# **Washing machine  model:**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3zywMi8npWP5",
        "outputId": "90d3ef79-f5d3-45ad-c9a3-4850c1e4da64"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/gdrive')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /gdrive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 37
        },
        "id": "sPSxgf0YxmvQ",
        "outputId": "ea059341-0480-4ccb-9257-ebcb78137e86"
      },
      "source": [
        "tf.__version__"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'2.6.0'"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mj0kkRTTLuq4"
      },
      "source": [
        "import tensorflow as tf\n",
        "tf.config.run_functions_eagerly(True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8FtbcnJgUEZT",
        "outputId": "f29bab02-a126-4d52-e36e-975f2bbba567"
      },
      "source": [
        "!pip install -U tensorflow-addons"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting tensorflow-addons\n",
            "  Downloading tensorflow_addons-0.14.0-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (1.1 MB)\n",
            "\u001b[?25l\r\u001b[K     |▎                               | 10 kB 22.0 MB/s eta 0:00:01\r\u001b[K     |▋                               | 20 kB 28.5 MB/s eta 0:00:01\r\u001b[K     |▉                               | 30 kB 16.3 MB/s eta 0:00:01\r\u001b[K     |█▏                              | 40 kB 10.8 MB/s eta 0:00:01\r\u001b[K     |█▌                              | 51 kB 5.4 MB/s eta 0:00:01\r\u001b[K     |█▊                              | 61 kB 5.5 MB/s eta 0:00:01\r\u001b[K     |██                              | 71 kB 5.7 MB/s eta 0:00:01\r\u001b[K     |██▍                             | 81 kB 6.4 MB/s eta 0:00:01\r\u001b[K     |██▋                             | 92 kB 6.6 MB/s eta 0:00:01\r\u001b[K     |███                             | 102 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███▎                            | 112 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███▌                            | 122 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███▉                            | 133 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████▏                           | 143 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████▍                           | 153 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████▊                           | 163 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████                           | 174 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████▎                          | 184 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████▋                          | 194 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████                          | 204 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████▏                         | 215 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████▌                         | 225 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████▉                         | 235 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████                         | 245 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████▍                        | 256 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████▊                        | 266 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████                        | 276 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████▎                       | 286 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████▋                       | 296 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████▉                       | 307 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████▏                      | 317 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████▌                      | 327 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████▊                      | 337 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████                      | 348 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████▍                     | 358 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████▋                     | 368 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████                     | 378 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████▎                    | 389 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████▌                    | 399 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████▉                    | 409 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████▏                   | 419 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████▍                   | 430 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████▊                   | 440 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████                   | 450 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████▎                  | 460 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████▋                  | 471 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████                  | 481 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████▏                 | 491 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████▌                 | 501 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████▉                 | 512 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████                 | 522 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████▍                | 532 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████▊                | 542 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████                | 552 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████▎               | 563 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████▋               | 573 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████▉               | 583 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████████▏              | 593 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████████▌              | 604 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████████▊              | 614 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████████              | 624 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████████▍             | 634 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████████▋             | 645 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████             | 655 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████▎            | 665 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████▌            | 675 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████▉            | 686 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████████▏           | 696 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████████▍           | 706 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████████▊           | 716 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████████████           | 727 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▎          | 737 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▋          | 747 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████████████          | 757 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▏         | 768 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▌         | 778 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▉         | 788 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████████         | 798 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████████▍        | 808 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████████▊        | 819 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████████████        | 829 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▎       | 839 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▋       | 849 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▉       | 860 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▏      | 870 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▍      | 880 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▊      | 890 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████      | 901 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▎     | 911 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▋     | 921 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████     | 931 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▏    | 942 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▌    | 952 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▉    | 962 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████    | 972 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▍   | 983 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▊   | 993 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████   | 1.0 MB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▎  | 1.0 MB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▋  | 1.0 MB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▉  | 1.0 MB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▏ | 1.0 MB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▌ | 1.1 MB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▊ | 1.1 MB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████ | 1.1 MB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▍| 1.1 MB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▋| 1.1 MB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 1.1 MB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 1.1 MB 5.2 MB/s \n",
            "\u001b[?25hRequirement already satisfied: typeguard>=2.7 in /usr/local/lib/python3.7/dist-packages (from tensorflow-addons) (2.7.1)\n",
            "Installing collected packages: tensorflow-addons\n",
            "Successfully installed tensorflow-addons-0.14.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Zr514ilapKFO"
      },
      "source": [
        "#loading the values\n",
        "import numpy as np\n",
        "fil = np.load('/gdrive/MyDrive/washdish.npz',allow_pickle=True)\n",
        "\n",
        "timetr,atr,dtr,wtr,dbtr,wbtr = fil['arr_0'],fil['arr_1'],fil['arr_2'],fil['arr_3'],fil['arr_4'],fil['arr_5']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J8H6LGJrJoXH"
      },
      "source": [
        "import numpy as np\n",
        "fil = np.load('/gdrive/MyDrive/washdishtest.npz',allow_pickle=True)\n",
        "\n",
        "timetest,atest,dtest,wtest,dbtest,wbtest = fil['arr_0'],fil['arr_1'],fil['arr_2'],fil['arr_3'],fil['arr_4'],fil['arr_5']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zt8aKLUNutJ7"
      },
      "source": [
        "\n",
        "wtr = np.reshape(wtr,[-1,512,1])\n",
        "wbtr = np.reshape(wbtr,[-1,512,1])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Qtw7l8GduH9M"
      },
      "source": [
        "\n",
        "wtest = np.reshape(wtest,[-1,512,1])\n",
        "wbtest = np.reshape(wbtest,[-1,512,1])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aHzlJ2UU69Dr"
      },
      "source": [
        "def prepare(a,b):\n",
        "  temp = []\n",
        "  t = np.shape(a)[0]\n",
        "  for i in range(t):\n",
        "    temp.append(list(zip(a[i],b[i])))\n",
        "  return np.array(temp)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jRNl_uKfQ1Pm"
      },
      "source": [
        "traindata = prepare(timetr,atr)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rL4ur3AOGJzQ"
      },
      "source": [
        "testdata = prepare(timetest,atest)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "klHcL_C14iXr"
      },
      "source": [
        "\n",
        "train_dataset = tf.data.Dataset.from_tensor_slices(\n",
        "    (\n",
        "        {\"input_1\": traindata},\n",
        "        {\"ed\": wtr, \"sd\": wbtr},\n",
        "    )\n",
        ")\n",
        "train_dataset = train_dataset.batch(100)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3K23pQ-9J4mM"
      },
      "source": [
        "test_dataset = tf.data.Dataset.from_tensor_slices(\n",
        "    (\n",
        "        {\"input_1\": testdata},\n",
        "        {\"ed\": wtest, \"sd\": wbtest},\n",
        "    )\n",
        ")\n",
        "test_dataset = test_dataset.batch(100)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8wu3qIavx9F7"
      },
      "source": [
        "import tensorflow as tf\n",
        "import tensorflow_addons as tfa\n",
        "from tensorflow.keras import Input, Model\n",
        "\n",
        "\n",
        "input1 = tf.keras.layers.Input(shape=(512,2),name=\"input_1\")\n",
        "#input2 = tf.keras.layers.Input(shape=(None,512),name=\"input_2\")\n",
        "#inputs= tf.keras.layers.Concatenate(axis=0)([input1, input2])\n",
        "#inputs = tf.reshape(input1,[-1,512,1])\n",
        "x = tf.keras.layers.Conv1D(filters=16, kernel_size=3, strides=1, padding=\"causal\", activation=\"relu\",input_shape=(512,2))(input1)\n",
        "x = tf.keras.layers.Bidirectional(tf.keras.layers.GRU(128, activation=\"tanh\", return_sequences=True))(x)\n",
        "x = tf.keras.layers.Bidirectional(tf.keras.layers.GRU(256, activation=\"tanh\", return_sequences=True))(x)\n",
        "x = tf.keras.layers.Dense(128, activation=\"tanh\")(x)\n",
        "o1 = tf.keras.layers.Dense(1, activation=\"linear\",name=\"ed\")(x)\n",
        "o2 = tf.keras.layers.Dense(1, activation=\"sigmoid\",name=\"sd\")(x)\n",
        "\n",
        "model = Model(inputs=[input1], outputs=[o1, o2])\n",
        "\n",
        "model.compile(loss={'ed': 'mean_squared_error', \n",
        "                    'sd': 'binary_crossentropy'},\n",
        "              loss_weights={'ed':0.4,\n",
        "                            'sd':0.6},\n",
        "              optimizer='adam',\n",
        "              metrics={'ed': tf.keras.metrics.MeanAbsoluteError(name=\"mean_absolute_error\", dtype=None),\n",
        "                       'sd': tfa.metrics.F1Score(name=\"f1_score\",num_classes=2, threshold=0.5, average = \"micro\")})"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mN34E7-qNRjw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8285f6ee-4d9a-4173-8138-6511fb0a3a46"
      },
      "source": [
        "#Training for washing machine\n",
        "import os\n",
        "checkpoint = '/gdrive/MyDrive/washing.ckpt'\n",
        "cdir = os.path.dirname(checkpoint)\n",
        "\n",
        "cp_callback = tf.keras.callbacks.ModelCheckpoint(\n",
        "    filepath=checkpoint, \n",
        "    verbose=1, \n",
        "    monitor='loss',\n",
        "    save_weights_only=False,\n",
        "    save_best_only=True)\n",
        "\n",
        "\n",
        "\n",
        "history = model.fit(train_dataset,epochs=3,callbacks=[cp_callback],verbose=1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/3\n",
            "79/79 [==============================] - 1514s 19s/step - loss: 0.4880 - ed_loss: 0.8929 - sd_loss: 0.2180 - ed_mean_absolute_error: 0.2477 - sd_f1_score: 0.0311\n",
            "\n",
            "Epoch 00001: loss improved from inf to 0.48797, saving model to /gdrive/MyDrive/washing.ckpt\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Found untraced functions such as gru_cell_1_layer_call_fn, gru_cell_1_layer_call_and_return_conditional_losses, gru_cell_2_layer_call_fn, gru_cell_2_layer_call_and_return_conditional_losses, gru_cell_4_layer_call_fn while saving (showing 5 of 20). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/washing.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/washing.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 2/3\n",
            "79/79 [==============================] - 1492s 19s/step - loss: 0.4553 - ed_loss: 0.8576 - sd_loss: 0.1870 - ed_mean_absolute_error: 0.2198 - sd_f1_score: 0.0031\n",
            "\n",
            "Epoch 00002: loss improved from 0.48797 to 0.45525, saving model to /gdrive/MyDrive/washing.ckpt\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Found untraced functions such as gru_cell_1_layer_call_fn, gru_cell_1_layer_call_and_return_conditional_losses, gru_cell_2_layer_call_fn, gru_cell_2_layer_call_and_return_conditional_losses, gru_cell_4_layer_call_fn while saving (showing 5 of 20). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/washing.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/washing.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 3/3\n",
            "79/79 [==============================] - 1513s 19s/step - loss: 0.4502 - ed_loss: 0.8473 - sd_loss: 0.1855 - ed_mean_absolute_error: 0.2088 - sd_f1_score: 0.0014\n",
            "\n",
            "Epoch 00003: loss improved from 0.45525 to 0.45019, saving model to /gdrive/MyDrive/washing.ckpt\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Found untraced functions such as gru_cell_1_layer_call_fn, gru_cell_1_layer_call_and_return_conditional_losses, gru_cell_2_layer_call_fn, gru_cell_2_layer_call_and_return_conditional_losses, gru_cell_4_layer_call_fn while saving (showing 5 of 20). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/washing.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/washing.ckpt/assets\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "abRujLhnBE0G",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9874eae1-131f-4355-9e40-289421ede58c"
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model_3\"\n",
            "__________________________________________________________________________________________________\n",
            "Layer (type)                    Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            "input_1 (InputLayer)            [(None, 512, 2)]     0                                            \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_3 (Conv1D)               (None, 512, 16)      112         input_1[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "bidirectional_6 (Bidirectional) (None, 512, 256)     112128      conv1d_3[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "bidirectional_7 (Bidirectional) (None, 512, 512)     789504      bidirectional_6[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "dense_3 (Dense)                 (None, 512, 128)     65664       bidirectional_7[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "ed (Dense)                      (None, 512, 1)       129         dense_3[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "sd (Dense)                      (None, 512, 1)       129         dense_3[0][0]                    \n",
            "==================================================================================================\n",
            "Total params: 967,666\n",
            "Trainable params: 967,666\n",
            "Non-trainable params: 0\n",
            "__________________________________________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 159
        },
        "id": "LcP2v2AyUheU",
        "outputId": "b0e43d28-b0b9-478d-9fea-53498b5dfe6b"
      },
      "source": [
        "#plotting loss metrics \n",
        "import matplotlib.pyplot as plot\n",
        "plot.subplot(3,1,2)\n",
        "plot.plot(history.history['loss'])\n",
        "plot.plot(history.history['ed_loss'])\n",
        "plot.plot(history.history['sd_loss'])\n",
        "plot.title('model loss')\n",
        "plot.ylabel('loss')\n",
        "plot.xlabel('epoch')\n",
        "plot.legend(['overall', 'ed','sd'], loc='upper right')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f0de7dbe2d0>"
            ]
          },
          "metadata": {},
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 194
        },
        "id": "gNVTSn7NWD3p",
        "outputId": "51656834-46ff-4eda-ea05-d83bf6a6af8e"
      },
      "source": [
        "#plotting metrics\n",
        "plot.subplot(2,1,2)\n",
        "plot.plot(history.history['ed_mean_absolute_error'])\n",
        "plot.plot(history.history['sd_f1_score'])\n",
        "plot.title('model loss')\n",
        "plot.ylabel('loss')\n",
        "plot.xlabel('epoch')\n",
        "plot.legend(['MAE', 'F1'], loc='upper right')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f0de6be1810>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kbjQYcEKJidW",
        "outputId": "03ed7723-6737-4234-b237-ae79ed4e651a"
      },
      "source": [
        "result = model.evaluate(test_dataset)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "34/34 [==============================] - 180s 5s/step - loss: 0.5800 - ed_loss: 1.0549 - sd_loss: 0.2634 - ed_mean_absolute_error: 0.2828 - sd_f1_score: 0.0000e+00\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "apEp1tFsKmEW"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jpPvj82qJnGv",
        "outputId": "d503183f-b2ac-4baa-db51-7db7735c3b95"
      },
      "source": [
        "dict(zip(model.metrics_names, result))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'ed_loss': 1.054917573928833,\n",
              " 'ed_mean_absolute_error': 0.2827630639076233,\n",
              " 'loss': 0.5799944996833801,\n",
              " 'sd_f1_score': 0.0,\n",
              " 'sd_loss': 0.26337915658950806}"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tX8RHJr153JL",
        "outputId": "5f49b85c-2606-4190-ade2-8de097e7b599"
      },
      "source": [
        "pred = model.predict(testdata,verbose=1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/tensorflow/python/data/ops/dataset_ops.py:4212: UserWarning: Even though the `tf.config.experimental_run_functions_eagerly` option is set, this option does not apply to tf.data functions. To force eager execution of tf.data functions, please use `tf.data.experimental.enable_debug_mode()`.\n",
            "  \"Even though the `tf.config.experimental_run_functions_eagerly` \"\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "105/105 [==============================] - 328s 3s/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JgunLpIt0hEk",
        "outputId": "f9f36762-87da-4eb1-bb9b-053deeb3f605"
      },
      "source": [
        "z = [1,2,3,4]\n",
        "z = np.array(z)\n",
        "mz = z.mean()\n",
        "mstd = z.std()\n",
        "z = stan(z)\n",
        "print((z*mstd)+mz)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1. 2. 3. 4.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "S_TkzuVJYwYi",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 194
        },
        "outputId": "a2caed72-7876-42c2-b6e0-690cc9ff1ea4"
      },
      "source": [
        "import matplotlib.pyplot as plot\n",
        "\n",
        "# pred[0] = (pred[0]*w.std())+w.mean()\n",
        "# wtest = (wtest*w.std())+w.mean()\n",
        "# atest = (atest*a.std())+a.mean()\n",
        "\n",
        "predicted = pred[0] * pred[1]\n",
        "plot.subplot(2,1,2)\n",
        "plot.plot(predicted.flatten())\n",
        "plot.plot(wtest.flatten())\n",
        "#plot.plot(atest.flatten())\n",
        "plot.title('predicted vs actual')\n",
        "plot.ylabel('Active Power (W)')\n",
        "plot.xlabel('Sample number')\n",
        "plot.legend(['predicted', 'actual'], loc='upper right')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f0ddfd7aa10>"
            ]
          },
          "metadata": {},
          "execution_count": 34
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V3R-3c-AY5fa"
      },
      "source": [
        "import os\n",
        "import tensorflow_addons as tfa\n",
        "checkpoint = '/gdrive/MyDrive/washing.ckpt'\n",
        "cdir = os.path.dirname(checkpoint)\n",
        "latest = tf.train.latest_checkpoint(cdir)\n",
        "from tensorflow import keras\n",
        "model = keras.models.load_model('/gdrive/MyDrive/washing.ckpt',custom_objects={\"f1_score\":tfa.metrics.F1Score})"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "43m20-CpvtPq"
      },
      "source": [
        "# **Dishwasher Model:**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0Ayu6sMQwDJ_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d93e5b36-834a-4775-ea21-1d17c8ee1a58"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/gdrive')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /gdrive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8EZuklfyG42h"
      },
      "source": [
        "import tensorflow as tf\n",
        "tf.config.run_functions_eagerly(True)\n",
        "!pip install -U tensorflow-addons"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bstluwl8wELk"
      },
      "source": [
        "#loading the values\n",
        "import numpy as np\n",
        "fil = np.load('/gdrive/MyDrive/washdish.npz',allow_pickle=True)\n",
        "\n",
        "timetr,atr,dtr,wtr,dbtr,wbtr = fil['arr_0'],fil['arr_1'],fil['arr_2'],fil['arr_3'],fil['arr_4'],fil['arr_5']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ud78VaySGuDr"
      },
      "source": [
        "import numpy as np\n",
        "fil = np.load('/gdrive/MyDrive/washdishtest.npz',allow_pickle=True)\n",
        "\n",
        "timetest,atest,dtest,wtest,dbtest,wbtest = fil['arr_0'],fil['arr_1'],fil['arr_2'],fil['arr_3'],fil['arr_4'],fil['arr_5']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XZQc5SlhOHbU",
        "outputId": "7349e713-7989-4393-d1eb-5cd63221391b"
      },
      "source": [
        "np.shape(dtr) == np.shape(dbtr)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Q0Oa8LHMH5XA"
      },
      "source": [
        "dtr = np.reshape(dtr,[-1,512,1])\n",
        "dbtr = np.reshape(dbtr,[-1,512,1])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ssKWy78sIAHQ"
      },
      "source": [
        "dtest = np.reshape(dtest,[-1,512,1])\n",
        "dbtest = np.reshape(dbtest,[-1,512,1])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vAcRpFVhIp84"
      },
      "source": [
        "def prepare(a,b):\n",
        "  temp = []\n",
        "  t = np.shape(a)[0]\n",
        "  for i in range(t):\n",
        "    temp.append(list(zip(a[i],b[i])))\n",
        "  return np.array(temp)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cpk5PUV0Ip85"
      },
      "source": [
        "traindata = prepare(timetr,atr)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gl2TgLvBIp85"
      },
      "source": [
        "testdata = prepare(timetest,atest)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_B8uTo7yIp85"
      },
      "source": [
        "\n",
        "train_dataset = tf.data.Dataset.from_tensor_slices(\n",
        "    (\n",
        "        {\"input_1\": traindata},\n",
        "        {\"ed\": dtr, \"sd\": dbtr},\n",
        "    )\n",
        ")\n",
        "train_dataset = train_dataset.batch(100)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q0QuYm7_K7T8",
        "outputId": "38d1fa93-880c-4c15-d972-07c075f1f785"
      },
      "source": [
        "np.shape(wbtr)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(7838, 512, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3IiiuGHOIp86"
      },
      "source": [
        "test_dataset = tf.data.Dataset.from_tensor_slices(\n",
        "    (\n",
        "        {\"input_1\": testdata},\n",
        "        {\"ed\": dtest, \"sd\": dbtest},\n",
        "    )\n",
        ")\n",
        "test_dataset = test_dataset.batch(100)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "957LNUGsIp86"
      },
      "source": [
        "import tensorflow as tf\n",
        "import tensorflow_addons as tfa\n",
        "from tensorflow.keras import Input, Model\n",
        "\n",
        "\n",
        "input1 = tf.keras.layers.Input(shape=(512,2),name=\"input_1\")\n",
        "#input2 = tf.keras.layers.Input(shape=(None,512),name=\"input_2\")\n",
        "#inputs= tf.keras.layers.Concatenate(axis=0)([input1, input2])\n",
        "#inputs = tf.reshape(input1,[-1,512,1])\n",
        "x = tf.keras.layers.Conv1D(filters=16, kernel_size=3, strides=1, padding=\"causal\", activation=\"relu\",input_shape=(512,2))(input1)\n",
        "x = tf.keras.layers.Bidirectional(tf.keras.layers.GRU(128, activation=\"tanh\", return_sequences=True))(x)\n",
        "x = tf.keras.layers.Bidirectional(tf.keras.layers.GRU(256, activation=\"tanh\", return_sequences=True))(x)\n",
        "x = tf.keras.layers.Dense(128, activation=\"tanh\")(x)\n",
        "o1 = tf.keras.layers.Dense(1, activation=\"linear\",name=\"ed\")(x)\n",
        "o2 = tf.keras.layers.Dense(1, activation=\"sigmoid\",name=\"sd\")(x)\n",
        "\n",
        "model = Model(inputs=[input1], outputs=[o1, o2])\n",
        "\n",
        "model.compile(loss={'ed': 'mean_squared_error', \n",
        "                    'sd': 'binary_crossentropy'},\n",
        "              loss_weights={'ed':0.4,\n",
        "                            'sd':0.6},\n",
        "              optimizer='adam',\n",
        "              metrics={'ed': tf.keras.metrics.MeanAbsoluteError(name=\"mean_absolute_error\", dtype=None),\n",
        "                       'sd': tfa.metrics.F1Score(name=\"f1_score\",num_classes=2, threshold=0.5, average = \"micro\")})"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VDG2krK-Ip86",
        "outputId": "8ebc1784-416a-4c39-f350-9a7647e97a3b"
      },
      "source": [
        "#Training for washing machine\n",
        "import os\n",
        "checkpoint = '/gdrive/MyDrive/dishwash.ckpt'\n",
        "cdir = os.path.dirname(checkpoint)\n",
        "\n",
        "cp_callback = tf.keras.callbacks.ModelCheckpoint(\n",
        "    filepath=checkpoint, \n",
        "    verbose=1, \n",
        "    monitor='loss',\n",
        "    save_weights_only=False,\n",
        "    save_best_only=True)\n",
        "\n",
        "\n",
        "\n",
        "history = model.fit(train_dataset,epochs=5,callbacks=[cp_callback],verbose=1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/5\n",
            "79/79 [==============================] - 1519s 19s/step - loss: 0.4072 - ed_loss: 0.6432 - sd_loss: 0.2498 - ed_mean_absolute_error: 0.2898 - sd_f1_score: 0.2171\n",
            "\n",
            "Epoch 00001: loss improved from inf to 0.40719, saving model to /gdrive/MyDrive/dishwash.ckpt\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:absl:Found untraced functions such as gru_cell_1_layer_call_fn, gru_cell_1_layer_call_and_return_conditional_losses, gru_cell_2_layer_call_fn, gru_cell_2_layer_call_and_return_conditional_losses, gru_cell_4_layer_call_fn while saving (showing 5 of 20). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/dishwash.ckpt/assets\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/dishwash.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 2/5\n",
            "79/79 [==============================] - 1504s 19s/step - loss: 0.3453 - ed_loss: 0.5456 - sd_loss: 0.2117 - ed_mean_absolute_error: 0.2491 - sd_f1_score: 0.2741\n",
            "\n",
            "Epoch 00002: loss improved from 0.40719 to 0.34527, saving model to /gdrive/MyDrive/dishwash.ckpt\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Found untraced functions such as gru_cell_1_layer_call_fn, gru_cell_1_layer_call_and_return_conditional_losses, gru_cell_2_layer_call_fn, gru_cell_2_layer_call_and_return_conditional_losses, gru_cell_4_layer_call_fn while saving (showing 5 of 20). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/dishwash.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/dishwash.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 3/5\n",
            "79/79 [==============================] - 1502s 19s/step - loss: 0.3115 - ed_loss: 0.4855 - sd_loss: 0.1956 - ed_mean_absolute_error: 0.2166 - sd_f1_score: 0.3831\n",
            "\n",
            "Epoch 00003: loss improved from 0.34527 to 0.31154, saving model to /gdrive/MyDrive/dishwash.ckpt\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Found untraced functions such as gru_cell_1_layer_call_fn, gru_cell_1_layer_call_and_return_conditional_losses, gru_cell_2_layer_call_fn, gru_cell_2_layer_call_and_return_conditional_losses, gru_cell_4_layer_call_fn while saving (showing 5 of 20). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/dishwash.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/dishwash.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 4/5\n",
            "79/79 [==============================] - 1493s 19s/step - loss: 0.2431 - ed_loss: 0.4156 - sd_loss: 0.1281 - ed_mean_absolute_error: 0.2066 - sd_f1_score: 0.6534\n",
            "\n",
            "Epoch 00004: loss improved from 0.31154 to 0.24309, saving model to /gdrive/MyDrive/dishwash.ckpt\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Found untraced functions such as gru_cell_1_layer_call_fn, gru_cell_1_layer_call_and_return_conditional_losses, gru_cell_2_layer_call_fn, gru_cell_2_layer_call_and_return_conditional_losses, gru_cell_4_layer_call_fn while saving (showing 5 of 20). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/dishwash.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/dishwash.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 5/5\n",
            "79/79 [==============================] - 1495s 19s/step - loss: 0.2142 - ed_loss: 0.3772 - sd_loss: 0.1055 - ed_mean_absolute_error: 0.2056 - sd_f1_score: 0.7077\n",
            "\n",
            "Epoch 00005: loss improved from 0.24309 to 0.21417, saving model to /gdrive/MyDrive/dishwash.ckpt\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Found untraced functions such as gru_cell_1_layer_call_fn, gru_cell_1_layer_call_and_return_conditional_losses, gru_cell_2_layer_call_fn, gru_cell_2_layer_call_and_return_conditional_losses, gru_cell_4_layer_call_fn while saving (showing 5 of 20). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/dishwash.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/dishwash.ckpt/assets\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CzieddBoIp87",
        "outputId": "263f135d-a941-40a1-9df0-5fcc396caa32"
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model\"\n",
            "__________________________________________________________________________________________________\n",
            "Layer (type)                    Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            "input_1 (InputLayer)            [(None, 512, 2)]     0                                            \n",
            "__________________________________________________________________________________________________\n",
            "conv1d (Conv1D)                 (None, 512, 16)      112         input_1[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "bidirectional (Bidirectional)   (None, 512, 256)     112128      conv1d[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "bidirectional_1 (Bidirectional) (None, 512, 512)     789504      bidirectional[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "dense (Dense)                   (None, 512, 128)     65664       bidirectional_1[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "ed (Dense)                      (None, 512, 1)       129         dense[0][0]                      \n",
            "__________________________________________________________________________________________________\n",
            "sd (Dense)                      (None, 512, 1)       129         dense[0][0]                      \n",
            "==================================================================================================\n",
            "Total params: 967,666\n",
            "Trainable params: 967,666\n",
            "Non-trainable params: 0\n",
            "__________________________________________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 159
        },
        "id": "_l3G1IhIIp88",
        "outputId": "60da434b-8261-40a0-8429-e4709d6426a2"
      },
      "source": [
        "#plotting loss metrics \n",
        "import matplotlib.pyplot as plot\n",
        "plot.subplot(3,1,2)\n",
        "plot.plot(history.history['loss'])\n",
        "plot.plot(history.history['ed_loss'])\n",
        "plot.plot(history.history['sd_loss'])\n",
        "plot.title('model loss')\n",
        "plot.ylabel('loss')\n",
        "plot.xlabel('epoch')\n",
        "plot.legend(['overall', 'ed','sd'], loc='upper right')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f641f2bc6d0>"
            ]
          },
          "metadata": {},
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 194
        },
        "id": "qPoBOQIzIp88",
        "outputId": "424197eb-275e-46c8-fa77-133692961293"
      },
      "source": [
        "#plotting metrics\n",
        "plot.subplot(2,1,2)\n",
        "plot.plot(history.history['ed_mean_absolute_error'])\n",
        "plot.plot(history.history['sd_f1_score'])\n",
        "plot.title('model loss')\n",
        "plot.ylabel('metric score')\n",
        "plot.xlabel('epoch')\n",
        "plot.legend(['MAE', 'F1'], loc='upper right')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f6455ee9fd0>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ysOoFdlSIp88",
        "outputId": "94f93f77-4720-4354-d3be-07e0c615bc24"
      },
      "source": [
        "result = model.evaluate(test_dataset)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "34/34 [==============================] - 196s 6s/step - loss: 0.4730 - ed_loss: 0.7970 - sd_loss: 0.2570 - ed_mean_absolute_error: 0.2053 - sd_f1_score: 0.3965\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NFuUkSalIp89",
        "outputId": "677ff017-2933-4e2a-f5f9-79fdd112fd91"
      },
      "source": [
        "dict(zip(model.metrics_names, result))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'ed_loss': 0.7969693541526794,\n",
              " 'ed_mean_absolute_error': 0.20528985559940338,\n",
              " 'loss': 0.4729871153831482,\n",
              " 'sd_f1_score': 0.3964914381504059,\n",
              " 'sd_loss': 0.25699901580810547}"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0AiSyadFIp89",
        "outputId": "754a5031-a2f3-469d-ce30-6d90a0c6672d"
      },
      "source": [
        "pred = model.predict(testdata,verbose=1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/tensorflow/python/data/ops/dataset_ops.py:4212: UserWarning: Even though the `tf.config.experimental_run_functions_eagerly` option is set, this option does not apply to tf.data functions. To force eager execution of tf.data functions, please use `tf.data.experimental.enable_debug_mode()`.\n",
            "  \"Even though the `tf.config.experimental_run_functions_eagerly` \"\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "105/105 [==============================] - 399s 4s/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 194
        },
        "id": "nJAS4ovaJO0p",
        "outputId": "4e71053b-6328-48a0-ff20-dcb61ae735cd"
      },
      "source": [
        "import matplotlib.pyplot as plot\n",
        "\n",
        "# pred[0] = (pred[0]*w.std())+w.mean()\n",
        "# wtest = (wtest*w.std())+w.mean()\n",
        "# atest = (atest*a.std())+a.mean()\n",
        "\n",
        "pred[1] = (pred[1]>0.5).astype(np.float)\n",
        "predicted = pred[0] * pred[1]\n",
        "plot.subplot(2,1,2)\n",
        "plot.plot(dtest.flatten())\n",
        "plot.plot(predicted.flatten())\n",
        "#plot.plot(atest.flatten())\n",
        "plot.title('predicted vs actual')\n",
        "plot.ylabel('Active Power (W)')\n",
        "plot.xlabel('Sample number')\n",
        "plot.legend(['actual', 'predicted'], loc='upper right')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f641dc93810>"
            ]
          },
          "metadata": {},
          "execution_count": 36
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RATpcOovJO0r"
      },
      "source": [
        "import os\n",
        "import tensorflow_addons as tfa\n",
        "checkpoint = '/gdrive/MyDrive/dishwash.ckpt'\n",
        "cdir = os.path.dirname(checkpoint)\n",
        "latest = tf.train.latest_checkpoint(cdir)\n",
        "from tensorflow import keras\n",
        "model = keras.models.load_model('/gdrive/MyDrive/dishwash.ckpt',custom_objects={\"f1_score\":tfa.metrics.F1Score})"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "70fwZP18A1Lr"
      },
      "source": [
        "# **Toaster Model:**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MY2EMDX6EY9z",
        "outputId": "63db4d60-8363-4aa3-d738-ae64365b3c7e"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/gdrive')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /gdrive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "enEUTEr3EY91"
      },
      "source": [
        "import tensorflow as tf\n",
        "tf.config.run_functions_eagerly(True)\n",
        "!pip install -U tensorflow-addons"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1_DwY7KfEY91"
      },
      "source": [
        "#loading the values\n",
        "import numpy as np\n",
        "fil = np.load('/gdrive/MyDrive/toastmicro.npz',allow_pickle=True)\n",
        "\n",
        "timetr , atr , mbtr ,kbtr ,tbtr , mtr ,ktr ,ttr = fil['arr_0'],fil['arr_1'],fil['arr_2'],fil['arr_3'],fil['arr_4'],fil['arr_5'],fil['arr_6'],fil['arr_7']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RsMGxI16EY92"
      },
      "source": [
        "import numpy as np\n",
        "fil = np.load('/gdrive/MyDrive/toastmicrotest.npz',allow_pickle=True)\n",
        "\n",
        "timetest , atest , mbtest ,kbtest ,tbtest , mtest ,ktest ,ttest = fil['arr_0'],fil['arr_1'],fil['arr_2'],fil['arr_3'],fil['arr_4'],fil['arr_5'],fil['arr_6'],fil['arr_7']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZmNsV5lUEY92"
      },
      "source": [
        "ttr = np.reshape(ttr,[-1,128,1])\n",
        "tbtr = np.reshape(tbtr,[-1,128,1])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7huObS5vEY93"
      },
      "source": [
        "ttest = np.reshape(ttest,[-1,128,1])\n",
        "tbtest = np.reshape(tbtest,[-1,128,1])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Y-rRPhpDEY93"
      },
      "source": [
        "def prepare(a,b):\n",
        "  temp = []\n",
        "  t = np.shape(a)[0]\n",
        "  for i in range(t):\n",
        "    temp.append(list(zip(a[i],b[i])))\n",
        "  return np.array(temp)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r9E0Ao4VEY93"
      },
      "source": [
        "traindata = prepare(timetr,atr)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7WlzL8f0EY93"
      },
      "source": [
        "testdata = prepare(timetest,atest)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o54TM-vLEY93"
      },
      "source": [
        "\n",
        "train_dataset = tf.data.Dataset.from_tensor_slices(\n",
        "    (\n",
        "        {\"input_1\": traindata},\n",
        "        {\"ed\": ttr, \"sd\": tbtr},\n",
        "    )\n",
        ")\n",
        "train_dataset = train_dataset.batch(100)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_1R8tZ8NEY94"
      },
      "source": [
        "test_dataset = tf.data.Dataset.from_tensor_slices(\n",
        "    (\n",
        "        {\"input_1\": testdata},\n",
        "        {\"ed\": ttest, \"sd\": tbtest},\n",
        "    )\n",
        ")\n",
        "test_dataset = test_dataset.batch(100)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "11NuZfcCEY94"
      },
      "source": [
        "import tensorflow as tf\n",
        "import tensorflow_addons as tfa\n",
        "from tensorflow.keras import Input, Model\n",
        "\n",
        "\n",
        "input1 = tf.keras.layers.Input(shape=(128,2),name=\"input_1\")\n",
        "#input2 = tf.keras.layers.Input(shape=(None,512),name=\"input_2\")\n",
        "#inputs= tf.keras.layers.Concatenate(axis=0)([input1, input2])\n",
        "#inputs = tf.reshape(input1,[-1,512,1])\n",
        "x = tf.keras.layers.Conv1D(filters=16, kernel_size=3, strides=1, padding=\"causal\", activation=\"relu\",input_shape=(128,2))(input1)\n",
        "x = tf.keras.layers.Bidirectional(tf.keras.layers.GRU(128, activation=\"tanh\", return_sequences=True))(x)\n",
        "x = tf.keras.layers.Bidirectional(tf.keras.layers.GRU(256, activation=\"tanh\", return_sequences=True))(x)\n",
        "x = tf.keras.layers.Dense(128, activation=\"tanh\")(x)\n",
        "o1 = tf.keras.layers.Dense(1, activation=\"linear\",name=\"ed\")(x)\n",
        "o2 = tf.keras.layers.Dense(1, activation=\"sigmoid\",name=\"sd\")(x)\n",
        "\n",
        "model = Model(inputs=[input1], outputs=[o1, o2])\n",
        "\n",
        "model.compile(loss={'ed': 'mean_squared_error', \n",
        "                    'sd': 'binary_crossentropy'},\n",
        "              loss_weights={'ed':0.4,\n",
        "                            'sd':0.6},\n",
        "              optimizer='adam',\n",
        "              metrics={'ed': tf.keras.metrics.MeanAbsoluteError(name=\"mean_absolute_error\", dtype=None),\n",
        "                       'sd': tfa.metrics.F1Score(name=\"f1_score\",num_classes=2, threshold=0.5, average = \"micro\")})"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rzNo0HsnEY95",
        "outputId": "68fad336-03c5-4909-efc6-0f88a419abdc"
      },
      "source": [
        "#Training for washing machine\n",
        "import os\n",
        "checkpoint = '/gdrive/MyDrive/toaster.ckpt'\n",
        "cdir = os.path.dirname(checkpoint)\n",
        "\n",
        "cp_callback = tf.keras.callbacks.ModelCheckpoint(\n",
        "    filepath=checkpoint, \n",
        "    verbose=1, \n",
        "    monitor='loss',\n",
        "    save_weights_only=False,\n",
        "    save_best_only=True)\n",
        "\n",
        "\n",
        "\n",
        "history = model.fit(train_dataset,epochs=5,callbacks=[cp_callback],verbose=1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "314/314 [==============================] - 1430s 5s/step - loss: 0.2100 - ed_loss: 0.4749 - sd_loss: 0.0334 - ed_mean_absolute_error: 0.1532 - sd_f1_score: 0.5473\n",
            "\n",
            "Epoch 00001: loss improved from inf to 0.20996, saving model to /gdrive/MyDrive/toaster.ckpt\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Found untraced functions such as gru_cell_13_layer_call_fn, gru_cell_13_layer_call_and_return_conditional_losses, gru_cell_14_layer_call_fn, gru_cell_14_layer_call_and_return_conditional_losses, gru_cell_16_layer_call_fn while saving (showing 5 of 20). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/toaster.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/toaster.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 2/5\n",
            "314/314 [==============================] - 1431s 5s/step - loss: 0.1015 - ed_loss: 0.2322 - sd_loss: 0.0143 - ed_mean_absolute_error: 0.0724 - sd_f1_score: 0.8154\n",
            "\n",
            "Epoch 00002: loss improved from 0.20996 to 0.10150, saving model to /gdrive/MyDrive/toaster.ckpt\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Found untraced functions such as gru_cell_13_layer_call_fn, gru_cell_13_layer_call_and_return_conditional_losses, gru_cell_14_layer_call_fn, gru_cell_14_layer_call_and_return_conditional_losses, gru_cell_16_layer_call_fn while saving (showing 5 of 20). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/toaster.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/toaster.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 3/5\n",
            "314/314 [==============================] - 1423s 5s/step - loss: 0.0893 - ed_loss: 0.2042 - sd_loss: 0.0127 - ed_mean_absolute_error: 0.0602 - sd_f1_score: 0.8379\n",
            "\n",
            "Epoch 00003: loss improved from 0.10150 to 0.08930, saving model to /gdrive/MyDrive/toaster.ckpt\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Found untraced functions such as gru_cell_13_layer_call_fn, gru_cell_13_layer_call_and_return_conditional_losses, gru_cell_14_layer_call_fn, gru_cell_14_layer_call_and_return_conditional_losses, gru_cell_16_layer_call_fn while saving (showing 5 of 20). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/toaster.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/toaster.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 4/5\n",
            "314/314 [==============================] - 1423s 5s/step - loss: 0.0777 - ed_loss: 0.1771 - sd_loss: 0.0114 - ed_mean_absolute_error: 0.0468 - sd_f1_score: 0.8572\n",
            "\n",
            "Epoch 00004: loss improved from 0.08930 to 0.07765, saving model to /gdrive/MyDrive/toaster.ckpt\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Found untraced functions such as gru_cell_13_layer_call_fn, gru_cell_13_layer_call_and_return_conditional_losses, gru_cell_14_layer_call_fn, gru_cell_14_layer_call_and_return_conditional_losses, gru_cell_16_layer_call_fn while saving (showing 5 of 20). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/toaster.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/toaster.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 5/5\n",
            "314/314 [==============================] - 1424s 5s/step - loss: 0.0732 - ed_loss: 0.1670 - sd_loss: 0.0108 - ed_mean_absolute_error: 0.0433 - sd_f1_score: 0.8649\n",
            "\n",
            "Epoch 00005: loss improved from 0.07765 to 0.07325, saving model to /gdrive/MyDrive/toaster.ckpt\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Found untraced functions such as gru_cell_13_layer_call_fn, gru_cell_13_layer_call_and_return_conditional_losses, gru_cell_14_layer_call_fn, gru_cell_14_layer_call_and_return_conditional_losses, gru_cell_16_layer_call_fn while saving (showing 5 of 20). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/toaster.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/toaster.ckpt/assets\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "20xUk46gEY95",
        "outputId": "c4737ccc-65cc-4dda-daea-208d50c3ca1a"
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model_2\"\n",
            "__________________________________________________________________________________________________\n",
            "Layer (type)                    Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            "input_1 (InputLayer)            [(None, 128, 2)]     0                                            \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_2 (Conv1D)               (None, 128, 16)      112         input_1[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "bidirectional_4 (Bidirectional) (None, 128, 256)     112128      conv1d_2[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "bidirectional_5 (Bidirectional) (None, 128, 512)     789504      bidirectional_4[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "dense_2 (Dense)                 (None, 128, 128)     65664       bidirectional_5[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "ed (Dense)                      (None, 128, 1)       129         dense_2[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "sd (Dense)                      (None, 128, 1)       129         dense_2[0][0]                    \n",
            "==================================================================================================\n",
            "Total params: 967,666\n",
            "Trainable params: 967,666\n",
            "Non-trainable params: 0\n",
            "__________________________________________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 159
        },
        "id": "r_adfK1KEY95",
        "outputId": "9a0bcf2d-50fa-4b55-96da-910437c1680a"
      },
      "source": [
        "#plotting loss metrics \n",
        "import matplotlib.pyplot as plot\n",
        "plot.subplot(3,1,2)\n",
        "plot.plot(history.history['loss'])\n",
        "plot.plot(history.history['ed_loss'])\n",
        "plot.plot(history.history['sd_loss'])\n",
        "plot.title('model loss')\n",
        "plot.ylabel('loss')\n",
        "plot.xlabel('epoch')\n",
        "plot.legend(['overall', 'ed','sd'], loc='upper right')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f6456e62b10>"
            ]
          },
          "metadata": {},
          "execution_count": 54
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 194
        },
        "id": "gRYQwfB6EY96",
        "outputId": "e4c3a8b7-8be0-46b3-d694-594448cece8a"
      },
      "source": [
        "#plotting metrics\n",
        "plot.subplot(2,1,2)\n",
        "plot.plot(history.history['ed_mean_absolute_error'])\n",
        "plot.plot(history.history['sd_f1_score'])\n",
        "plot.title('model loss')\n",
        "plot.ylabel('metric score')\n",
        "plot.xlabel('epoch')\n",
        "plot.legend(['MAE', 'F1'], loc='upper right')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f641c502810>"
            ]
          },
          "metadata": {},
          "execution_count": 55
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AVuc9LIsEY96",
        "outputId": "11f6c575-a4dd-4718-f670-9868e8ef17c5"
      },
      "source": [
        "result = model.evaluate(test_dataset)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "135/135 [==============================] - 199s 1s/step - loss: 0.0850 - ed_loss: 0.1889 - sd_loss: 0.0157 - ed_mean_absolute_error: 0.0461 - sd_f1_score: 0.8206\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LQvRKV9aEY96",
        "outputId": "3c7d5bc4-dfda-4578-ccfd-1992168b9e59"
      },
      "source": [
        "dict(zip(model.metrics_names, result))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'ed_loss': 0.18885447084903717,\n",
              " 'ed_mean_absolute_error': 0.046101465821266174,\n",
              " 'loss': 0.08496434986591339,\n",
              " 'sd_f1_score': 0.8205962777137756,\n",
              " 'sd_loss': 0.015704235062003136}"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oZihFpH8EY96",
        "outputId": "ba1b32c1-caf0-4e19-9c50-e96347bda7db"
      },
      "source": [
        "pred = model.predict(testdata,verbose=1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/tensorflow/python/data/ops/dataset_ops.py:4212: UserWarning: Even though the `tf.config.experimental_run_functions_eagerly` option is set, this option does not apply to tf.data functions. To force eager execution of tf.data functions, please use `tf.data.experimental.enable_debug_mode()`.\n",
            "  \"Even though the `tf.config.experimental_run_functions_eagerly` \"\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "420/420 [==============================] - 410s 977ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 194
        },
        "id": "ZTuPqnfiEY97",
        "outputId": "8e3dde8f-df02-4978-8178-b2dcb78ed482"
      },
      "source": [
        "import matplotlib.pyplot as plot\n",
        "\n",
        "# pred[0] = (pred[0]*w.std())+w.mean()\n",
        "# wtest = (wtest*w.std())+w.mean()\n",
        "# atest = (atest*a.std())+a.mean()\n",
        "\n",
        "pred[1] = (pred[1]>0.5).astype(np.float)\n",
        "predicted = pred[0] * pred[1]\n",
        "plot.subplot(2,1,2)\n",
        "\n",
        "plot.plot(predicted.flatten())\n",
        "plot.plot(dtest.flatten())\n",
        "#plot.plot(atest.flatten())\n",
        "plot.title('predicted vs actual')\n",
        "plot.ylabel('Active Power (W)')\n",
        "plot.xlabel('Sample number')\n",
        "plot.legend([ 'predicted','actual'], loc='upper right')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f641daf1590>"
            ]
          },
          "metadata": {},
          "execution_count": 60
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V2Rf5y7VEY97"
      },
      "source": [
        "import os\n",
        "import tensorflow_addons as tfa\n",
        "checkpoint = '/gdrive/MyDrive/toaster.ckpt'\n",
        "cdir = os.path.dirname(checkpoint)\n",
        "latest = tf.train.latest_checkpoint(cdir)\n",
        "from tensorflow import keras\n",
        "model = keras.models.load_model('/gdrive/MyDrive/toaster.ckpt',custom_objects={\"f1_score\":tfa.metrics.F1Score})"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EV6tMbcmnlCC"
      },
      "source": [
        "# **Microwave model:**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A6sPU_XKnutl",
        "outputId": "63db4d60-8363-4aa3-d738-ae64365b3c7e"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/gdrive')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /gdrive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZZvkK3-Tnutn"
      },
      "source": [
        "import tensorflow as tf\n",
        "tf.config.run_functions_eagerly(True)\n",
        "!pip install -U tensorflow-addons"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KRZHGErGnutn"
      },
      "source": [
        "#loading the values\n",
        "import numpy as np\n",
        "fil = np.load('/gdrive/MyDrive/toastmicro.npz',allow_pickle=True)\n",
        "\n",
        "timetr , atr , mbtr ,kbtr ,tbtr , mtr ,ktr ,ttr = fil['arr_0'],fil['arr_1'],fil['arr_2'],fil['arr_3'],fil['arr_4'],fil['arr_5'],fil['arr_6'],fil['arr_7']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "12Emk4lKnutn"
      },
      "source": [
        "import numpy as np\n",
        "fil = np.load('/gdrive/MyDrive/toastmicrotest.npz',allow_pickle=True)\n",
        "\n",
        "timetest , atest , mbtest ,kbtest ,tbtest , mtest ,ktest ,ttest = fil['arr_0'],fil['arr_1'],fil['arr_2'],fil['arr_3'],fil['arr_4'],fil['arr_5'],fil['arr_6'],fil['arr_7']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gAe3Wt8onuto"
      },
      "source": [
        "mtr = np.reshape(mtr,[-1,128,1])\n",
        "mbtr = np.reshape(mbtr,[-1,128,1])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pXa0COMAnuto"
      },
      "source": [
        "mtest = np.reshape(mtest,[-1,128,1])\n",
        "mbtest = np.reshape(mbtest,[-1,128,1])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9C5hYBRlnuto"
      },
      "source": [
        "def prepare(a,b):\n",
        "  temp = []\n",
        "  t = np.shape(a)[0]\n",
        "  for i in range(t):\n",
        "    temp.append(list(zip(a[i],b[i])))\n",
        "  return np.array(temp)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lXDrP72mnuto"
      },
      "source": [
        "traindata = prepare(timetr,atr)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fxn1XaNTnutp"
      },
      "source": [
        "testdata = prepare(timetest,atest)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1e8SaYV9nutp"
      },
      "source": [
        "\n",
        "train_dataset = tf.data.Dataset.from_tensor_slices(\n",
        "    (\n",
        "        {\"input_1\": traindata},\n",
        "        {\"ed\": mtr, \"sd\": mbtr},\n",
        "    )\n",
        ")\n",
        "train_dataset = train_dataset.batch(100)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Vv3d7ZLdnutp"
      },
      "source": [
        "test_dataset = tf.data.Dataset.from_tensor_slices(\n",
        "    (\n",
        "        {\"input_1\": testdata},\n",
        "        {\"ed\": mtest, \"sd\": mbtest},\n",
        "    )\n",
        ")\n",
        "test_dataset = test_dataset.batch(100)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9XP3XRhQnutp"
      },
      "source": [
        "import tensorflow as tf\n",
        "import tensorflow_addons as tfa\n",
        "from tensorflow.keras import Input, Model\n",
        "\n",
        "\n",
        "input1 = tf.keras.layers.Input(shape=(128,2),name=\"input_1\")\n",
        "#input2 = tf.keras.layers.Input(shape=(None,512),name=\"input_2\")\n",
        "#inputs= tf.keras.layers.Concatenate(axis=0)([input1, input2])\n",
        "#inputs = tf.reshape(input1,[-1,512,1])\n",
        "x = tf.keras.layers.Conv1D(filters=16, kernel_size=3, strides=1, padding=\"causal\", activation=\"relu\",input_shape=(128,2))(input1)\n",
        "x = tf.keras.layers.Bidirectional(tf.keras.layers.GRU(128, activation=\"tanh\", return_sequences=True))(x)\n",
        "x = tf.keras.layers.Bidirectional(tf.keras.layers.GRU(256, activation=\"tanh\", return_sequences=True))(x)\n",
        "x = tf.keras.layers.Dense(128, activation=\"tanh\")(x)\n",
        "o1 = tf.keras.layers.Dense(1, activation=\"linear\",name=\"ed\")(x)\n",
        "o2 = tf.keras.layers.Dense(1, activation=\"sigmoid\",name=\"sd\")(x)\n",
        "\n",
        "model = Model(inputs=[input1], outputs=[o1, o2])\n",
        "\n",
        "model.compile(loss={'ed': 'mean_squared_error', \n",
        "                    'sd': 'binary_crossentropy'},\n",
        "              loss_weights={'ed':0.4,\n",
        "                            'sd':0.6},\n",
        "              optimizer='adam',\n",
        "              metrics={'ed': tf.keras.metrics.MeanAbsoluteError(name=\"mean_absolute_error\", dtype=None),\n",
        "                       'sd': tfa.metrics.F1Score(name=\"f1_score\",num_classes=2, threshold=0.5, average = \"micro\")})"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fKGe8thknutq",
        "outputId": "3d073a69-4e65-42eb-a254-08c74b29be3f"
      },
      "source": [
        "#Training for washing machine\n",
        "import os\n",
        "checkpoint = '/gdrive/MyDrive/microwave.ckpt'\n",
        "cdir = os.path.dirname(checkpoint)\n",
        "\n",
        "cp_callback = tf.keras.callbacks.ModelCheckpoint(\n",
        "    filepath=checkpoint, \n",
        "    verbose=1, \n",
        "    monitor='loss',\n",
        "    save_weights_only=False,\n",
        "    save_best_only=True)\n",
        "\n",
        "\n",
        "\n",
        "history = model.fit(train_dataset,epochs=5,callbacks=[cp_callback],verbose=1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/5\n",
            "314/314 [==============================] - 1441s 5s/step - loss: 0.3631 - ed_loss: 0.8380 - sd_loss: 0.0465 - ed_mean_absolute_error: 0.1435 - sd_f1_score: 0.0055\n",
            "\n",
            "Epoch 00001: loss improved from inf to 0.36312, saving model to /gdrive/MyDrive/microwave.ckpt\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:absl:Found untraced functions such as gru_cell_19_layer_call_fn, gru_cell_19_layer_call_and_return_conditional_losses, gru_cell_20_layer_call_fn, gru_cell_20_layer_call_and_return_conditional_losses, gru_cell_22_layer_call_fn while saving (showing 5 of 20). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/microwave.ckpt/assets\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/microwave.ckpt/assets\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 2/5\n",
            "314/314 [==============================] - 1445s 5s/step - loss: 0.3248 - ed_loss: 0.7536 - sd_loss: 0.0389 - ed_mean_absolute_error: 0.1318 - sd_f1_score: 0.1091\n",
            "\n",
            "Epoch 00002: loss improved from 0.36312 to 0.32478, saving model to /gdrive/MyDrive/microwave.ckpt\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:absl:Found untraced functions such as gru_cell_19_layer_call_fn, gru_cell_19_layer_call_and_return_conditional_losses, gru_cell_20_layer_call_fn, gru_cell_20_layer_call_and_return_conditional_losses, gru_cell_22_layer_call_fn while saving (showing 5 of 20). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/microwave.ckpt/assets\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/microwave.ckpt/assets\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 3/5\n",
            "314/314 [==============================] - 1443s 5s/step - loss: 0.2899 - ed_loss: 0.6695 - sd_loss: 0.0369 - ed_mean_absolute_error: 0.1043 - sd_f1_score: 0.2220\n",
            "\n",
            "Epoch 00003: loss improved from 0.32478 to 0.28993, saving model to /gdrive/MyDrive/microwave.ckpt\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Found untraced functions such as gru_cell_19_layer_call_fn, gru_cell_19_layer_call_and_return_conditional_losses, gru_cell_20_layer_call_fn, gru_cell_20_layer_call_and_return_conditional_losses, gru_cell_22_layer_call_fn while saving (showing 5 of 20). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/microwave.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/microwave.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 4/5\n",
            "314/314 [==============================] - 1426s 5s/step - loss: 0.2618 - ed_loss: 0.6030 - sd_loss: 0.0344 - ed_mean_absolute_error: 0.0968 - sd_f1_score: 0.2948\n",
            "\n",
            "Epoch 00004: loss improved from 0.28993 to 0.26183, saving model to /gdrive/MyDrive/microwave.ckpt\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Found untraced functions such as gru_cell_19_layer_call_fn, gru_cell_19_layer_call_and_return_conditional_losses, gru_cell_20_layer_call_fn, gru_cell_20_layer_call_and_return_conditional_losses, gru_cell_22_layer_call_fn while saving (showing 5 of 20). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/microwave.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/microwave.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 5/5\n",
            "314/314 [==============================] - 1430s 5s/step - loss: 0.2479 - ed_loss: 0.5709 - sd_loss: 0.0326 - ed_mean_absolute_error: 0.0904 - sd_f1_score: 0.3468\n",
            "\n",
            "Epoch 00005: loss improved from 0.26183 to 0.24793, saving model to /gdrive/MyDrive/microwave.ckpt\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Found untraced functions such as gru_cell_19_layer_call_fn, gru_cell_19_layer_call_and_return_conditional_losses, gru_cell_20_layer_call_fn, gru_cell_20_layer_call_and_return_conditional_losses, gru_cell_22_layer_call_fn while saving (showing 5 of 20). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/microwave.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/microwave.ckpt/assets\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B1K8rsZpnutq",
        "outputId": "16a658fb-f624-4f77-d7b7-8620ec5fd84d"
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model_3\"\n",
            "__________________________________________________________________________________________________\n",
            "Layer (type)                    Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            "input_1 (InputLayer)            [(None, 128, 2)]     0                                            \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_3 (Conv1D)               (None, 128, 16)      112         input_1[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "bidirectional_6 (Bidirectional) (None, 128, 256)     112128      conv1d_3[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "bidirectional_7 (Bidirectional) (None, 128, 512)     789504      bidirectional_6[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "dense_3 (Dense)                 (None, 128, 128)     65664       bidirectional_7[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "ed (Dense)                      (None, 128, 1)       129         dense_3[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "sd (Dense)                      (None, 128, 1)       129         dense_3[0][0]                    \n",
            "==================================================================================================\n",
            "Total params: 967,666\n",
            "Trainable params: 967,666\n",
            "Non-trainable params: 0\n",
            "__________________________________________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 159
        },
        "id": "Ixlb4FxMnutq",
        "outputId": "09cc5392-25d9-41cd-b53d-15437eff3b02"
      },
      "source": [
        "#plotting loss metrics \n",
        "import matplotlib.pyplot as plot\n",
        "plot.subplot(3,1,2)\n",
        "plot.plot(history.history['loss'])\n",
        "plot.plot(history.history['ed_loss'])\n",
        "plot.plot(history.history['sd_loss'])\n",
        "plot.title('model loss')\n",
        "plot.ylabel('loss')\n",
        "plot.xlabel('epoch')\n",
        "plot.legend(['overall', 'ed','sd'], loc='upper right')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f64173b6790>"
            ]
          },
          "metadata": {},
          "execution_count": 76
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 194
        },
        "id": "GCaiy1OLnutr",
        "outputId": "a2a36304-1dbf-463e-93b6-68ca7e31b385"
      },
      "source": [
        "#plotting metrics\n",
        "plot.subplot(2,1,2)\n",
        "plot.plot(history.history['ed_mean_absolute_error'])\n",
        "plot.plot(history.history['sd_f1_score'])\n",
        "plot.title('model loss')\n",
        "plot.ylabel('metric score')\n",
        "plot.xlabel('epoch')\n",
        "plot.legend(['MAE', 'F1'], loc='upper right')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f6456f67190>"
            ]
          },
          "metadata": {},
          "execution_count": 77
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Kbrr_GtSnutr",
        "outputId": "b80c3cb7-7c8f-48e0-8207-1a1f51431a7b"
      },
      "source": [
        "result = model.evaluate(test_dataset)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "135/135 [==============================] - 198s 1s/step - loss: 0.2717 - ed_loss: 0.5928 - sd_loss: 0.0576 - ed_mean_absolute_error: 0.0928 - sd_f1_score: 0.2157\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5iQoLbdHnutr",
        "outputId": "53f4f9c7-64a6-47d0-8dc0-318fe3cdd56a"
      },
      "source": [
        "dict(zip(model.metrics_names, result))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'ed_loss': 0.5927904844284058,\n",
              " 'ed_mean_absolute_error': 0.09281656891107559,\n",
              " 'loss': 0.2716723382472992,\n",
              " 'sd_f1_score': 0.21565493941307068,\n",
              " 'sd_loss': 0.05759339779615402}"
            ]
          },
          "metadata": {},
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IPctE_Lanuts",
        "outputId": "10b1ef61-24e1-4067-a6c5-e26d43b90f3f"
      },
      "source": [
        "pred = model.predict(testdata,verbose=1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/tensorflow/python/data/ops/dataset_ops.py:4212: UserWarning: Even though the `tf.config.experimental_run_functions_eagerly` option is set, this option does not apply to tf.data functions. To force eager execution of tf.data functions, please use `tf.data.experimental.enable_debug_mode()`.\n",
            "  \"Even though the `tf.config.experimental_run_functions_eagerly` \"\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "420/420 [==============================] - 411s 978ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 194
        },
        "id": "A9BZrE8Enuts",
        "outputId": "c44bd545-efc5-41dd-a18b-28c328ee108b"
      },
      "source": [
        "import matplotlib.pyplot as plot\n",
        "\n",
        "# pred[0] = (pred[0]*w.std())+w.mean()\n",
        "# wtest = (wtest*w.std())+w.mean()\n",
        "# atest = (atest*a.std())+a.mean()\n",
        "\n",
        "pred[1] = (pred[1]>0.5).astype(np.float)\n",
        "predicted = pred[0] * pred[1]\n",
        "plot.subplot(2,1,2)\n",
        "plot.plot(mtest.flatten())\n",
        "plot.plot(predicted.flatten())\n",
        "#plot.plot(atest.flatten())\n",
        "plot.title('predicted vs actual')\n",
        "plot.ylabel('Active Power (W)')\n",
        "plot.xlabel('Sample number')\n",
        "plot.legend(['actual', 'predicted'], loc='upper right')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f645501ef50>"
            ]
          },
          "metadata": {},
          "execution_count": 83
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s4lYC9Venuts"
      },
      "source": [
        "import os\n",
        "import tensorflow_addons as tfa\n",
        "checkpoint = '/gdrive/MyDrive/microwave.ckpt'\n",
        "cdir = os.path.dirname(checkpoint)\n",
        "latest = tf.train.latest_checkpoint(cdir)\n",
        "from tensorflow import keras\n",
        "model = keras.models.load_model('/gdrive/MyDrive/microwave.ckpt',custom_objects={\"f1_score\":tfa.metrics.F1Score})"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z4bfTNUDM_Jx"
      },
      "source": [
        "# **Kettle Model:**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6UK6azffNEqn",
        "outputId": "229e1dac-5b96-4fb4-8654-a24912d1c660"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/gdrive')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /gdrive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5zqY2ve7NEqo",
        "outputId": "72520ee3-f6db-4820-a7f1-78395bc6ccac"
      },
      "source": [
        "import tensorflow as tf\n",
        "tf.config.run_functions_eagerly(True)\n",
        "!pip install -U tensorflow-addons"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting tensorflow-addons\n",
            "  Downloading tensorflow_addons-0.14.0-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (1.1 MB)\n",
            "\u001b[?25l\r\u001b[K     |▎                               | 10 kB 24.9 MB/s eta 0:00:01\r\u001b[K     |▋                               | 20 kB 27.1 MB/s eta 0:00:01\r\u001b[K     |▉                               | 30 kB 17.8 MB/s eta 0:00:01\r\u001b[K     |█▏                              | 40 kB 9.2 MB/s eta 0:00:01\r\u001b[K     |█▌                              | 51 kB 5.4 MB/s eta 0:00:01\r\u001b[K     |█▊                              | 61 kB 5.5 MB/s eta 0:00:01\r\u001b[K     |██                              | 71 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |██▍                             | 81 kB 5.9 MB/s eta 0:00:01\r\u001b[K     |██▋                             | 92 kB 5.8 MB/s eta 0:00:01\r\u001b[K     |███                             | 102 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███▎                            | 112 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███▌                            | 122 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███▉                            | 133 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████▏                           | 143 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████▍                           | 153 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████▊                           | 163 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████                           | 174 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████▎                          | 184 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████▋                          | 194 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████                          | 204 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████▏                         | 215 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████▌                         | 225 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████▉                         | 235 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████                         | 245 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████▍                        | 256 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████▊                        | 266 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████                        | 276 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████▎                       | 286 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████▋                       | 296 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████▉                       | 307 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████▏                      | 317 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████▌                      | 327 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████▊                      | 337 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████                      | 348 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████▍                     | 358 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████▋                     | 368 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████                     | 378 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████▎                    | 389 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████▌                    | 399 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████▉                    | 409 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████▏                   | 419 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████▍                   | 430 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████▊                   | 440 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████                   | 450 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████▎                  | 460 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████▋                  | 471 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████                  | 481 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████▏                 | 491 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████▌                 | 501 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████▉                 | 512 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████                 | 522 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████▍                | 532 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████▊                | 542 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████                | 552 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████▎               | 563 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████▋               | 573 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████▉               | 583 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████████▏              | 593 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████████▌              | 604 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████████▊              | 614 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████████              | 624 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████████▍             | 634 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████████▋             | 645 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████             | 655 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████▎            | 665 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████▌            | 675 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████▉            | 686 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████████▏           | 696 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████████▍           | 706 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████████▊           | 716 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████████████           | 727 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▎          | 737 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▋          | 747 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████████████          | 757 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▏         | 768 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▌         | 778 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████████████▉         | 788 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████████         | 798 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████████▍        | 808 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████████▊        | 819 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████████████        | 829 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▎       | 839 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▋       | 849 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▉       | 860 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▏      | 870 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▍      | 880 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▊      | 890 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████      | 901 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▎     | 911 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▋     | 921 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████     | 931 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▏    | 942 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▌    | 952 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▉    | 962 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████    | 972 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▍   | 983 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▊   | 993 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████   | 1.0 MB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▎  | 1.0 MB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▋  | 1.0 MB 5.2 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▉  | 1.0 MB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▏ | 1.0 MB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▌ | 1.1 MB 5.2 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▊ | 1.1 MB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████ | 1.1 MB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▍| 1.1 MB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▋| 1.1 MB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 1.1 MB 5.2 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 1.1 MB 5.2 MB/s \n",
            "\u001b[?25hRequirement already satisfied: typeguard>=2.7 in /usr/local/lib/python3.7/dist-packages (from tensorflow-addons) (2.7.1)\n",
            "Installing collected packages: tensorflow-addons\n",
            "Successfully installed tensorflow-addons-0.14.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EG_DqPISNEqp"
      },
      "source": [
        "#loading the values\n",
        "import numpy as np\n",
        "fil = np.load('/gdrive/MyDrive/toastmicro.npz',allow_pickle=True)\n",
        "\n",
        "timetr , atr , mbtr ,kbtr ,tbtr , mtr ,ktr ,ttr = fil['arr_0'],fil['arr_1'],fil['arr_2'],fil['arr_3'],fil['arr_4'],fil['arr_5'],fil['arr_6'],fil['arr_7']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bpIzFG-jNEqp"
      },
      "source": [
        "import numpy as np\n",
        "fil = np.load('/gdrive/MyDrive/toastmicrotest.npz',allow_pickle=True)\n",
        "\n",
        "timetest , atest , mbtest ,kbtest ,tbtest , mtest ,ktest ,ttest = fil['arr_0'],fil['arr_1'],fil['arr_2'],fil['arr_3'],fil['arr_4'],fil['arr_5'],fil['arr_6'],fil['arr_7']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "z_V9GcKDNEqp"
      },
      "source": [
        "ktr = np.reshape(ktr,[-1,128,1])\n",
        "kbtr = np.reshape(kbtr,[-1,128,1])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GY3vu9k8NEqq"
      },
      "source": [
        "ktest = np.reshape(ktest,[-1,128,1])\n",
        "kbtest = np.reshape(kbtest,[-1,128,1])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EQMfG5roNEqq"
      },
      "source": [
        "def prepare(a,b):\n",
        "  temp = []\n",
        "  t = np.shape(a)[0]\n",
        "  for i in range(t):\n",
        "    temp.append(list(zip(a[i],b[i])))\n",
        "  return np.array(temp)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o36hEB7aNEqq"
      },
      "source": [
        "traindata = prepare(timetr,atr)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bCeylR6QNEqq"
      },
      "source": [
        "testdata = prepare(timetest,atest)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oiOWNyInNEqq"
      },
      "source": [
        "\n",
        "train_dataset = tf.data.Dataset.from_tensor_slices(\n",
        "    (\n",
        "        {\"input_1\": traindata},\n",
        "        {\"ed\": ktr, \"sd\": kbtr},\n",
        "    )\n",
        ")\n",
        "train_dataset = train_dataset.batch(100)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PsgLNsi_NEqr"
      },
      "source": [
        "test_dataset = tf.data.Dataset.from_tensor_slices(\n",
        "    (\n",
        "        {\"input_1\": testdata},\n",
        "        {\"ed\": ktest, \"sd\": kbtest},\n",
        "    )\n",
        ")\n",
        "test_dataset = test_dataset.batch(100)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4XT0j0w0NEqr"
      },
      "source": [
        "import tensorflow as tf\n",
        "import tensorflow_addons as tfa\n",
        "from tensorflow.keras import Input, Model\n",
        "\n",
        "\n",
        "input1 = tf.keras.layers.Input(shape=(128,2),name=\"input_1\")\n",
        "#input2 = tf.keras.layers.Input(shape=(None,512),name=\"input_2\")\n",
        "#inputs= tf.keras.layers.Concatenate(axis=0)([input1, input2])\n",
        "#inputs = tf.reshape(input1,[-1,512,1])\n",
        "x = tf.keras.layers.Conv1D(filters=16, kernel_size=3, strides=1, padding=\"causal\", activation=\"relu\",input_shape=(128,2))(input1)\n",
        "x = tf.keras.layers.Bidirectional(tf.keras.layers.GRU(128, activation=\"tanh\", return_sequences=True))(x)\n",
        "x = tf.keras.layers.Bidirectional(tf.keras.layers.GRU(256, activation=\"tanh\", return_sequences=True))(x)\n",
        "x = tf.keras.layers.Dense(128, activation=\"tanh\")(x)\n",
        "o1 = tf.keras.layers.Dense(1, activation=\"linear\",name=\"ed\")(x)\n",
        "o2 = tf.keras.layers.Dense(1, activation=\"sigmoid\",name=\"sd\")(x)\n",
        "\n",
        "model = Model(inputs=[input1], outputs=[o1, o2])\n",
        "\n",
        "model.compile(loss={'ed': 'mean_squared_error', \n",
        "                    'sd': 'binary_crossentropy'},\n",
        "              loss_weights={'ed':0.4,\n",
        "                            'sd':0.6},\n",
        "              optimizer='adam',\n",
        "              metrics={'ed': tf.keras.metrics.MeanAbsoluteError(name=\"mean_absolute_error\", dtype=None),\n",
        "                       'sd': tfa.metrics.F1Score(name=\"f1_score\",num_classes=2, threshold=0.5, average = \"micro\")})"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lVBffORdNEqr",
        "outputId": "59b07e4e-d6b8-43d7-b9ff-e6b61a82f7aa"
      },
      "source": [
        "#Training for washing machine\n",
        "import os\n",
        "checkpoint = '/gdrive/MyDrive/kettle.ckpt'\n",
        "cdir = os.path.dirname(checkpoint)\n",
        "\n",
        "cp_callback = tf.keras.callbacks.ModelCheckpoint(\n",
        "    filepath=checkpoint, \n",
        "    verbose=1, \n",
        "    monitor='loss',\n",
        "    save_weights_only=False,\n",
        "    save_best_only=True)\n",
        "\n",
        "\n",
        "\n",
        "history = model.fit(train_dataset,epochs=5,callbacks=[cp_callback],verbose=1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/5\n",
            "314/314 [==============================] - 1401s 4s/step - loss: 0.3870 - ed_loss: 0.9252 - sd_loss: 0.0282 - ed_mean_absolute_error: 0.1260 - sd_f1_score: 0.0000e+00\n",
            "\n",
            "Epoch 00001: loss improved from inf to 0.38699, saving model to /gdrive/MyDrive/kettle.ckpt\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:absl:Found untraced functions such as gru_cell_1_layer_call_and_return_conditional_losses, gru_cell_1_layer_call_fn, gru_cell_2_layer_call_and_return_conditional_losses, gru_cell_2_layer_call_fn, gru_cell_4_layer_call_and_return_conditional_losses while saving (showing 5 of 20). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/kettle.ckpt/assets\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/kettle.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 2/5\n",
            "314/314 [==============================] - 1387s 4s/step - loss: 0.3519 - ed_loss: 0.8485 - sd_loss: 0.0209 - ed_mean_absolute_error: 0.1195 - sd_f1_score: 0.0678\n",
            "\n",
            "Epoch 00002: loss improved from 0.38699 to 0.35191, saving model to /gdrive/MyDrive/kettle.ckpt\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Found untraced functions such as gru_cell_1_layer_call_and_return_conditional_losses, gru_cell_1_layer_call_fn, gru_cell_2_layer_call_and_return_conditional_losses, gru_cell_2_layer_call_fn, gru_cell_4_layer_call_and_return_conditional_losses while saving (showing 5 of 20). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/kettle.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/kettle.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 3/5\n",
            "314/314 [==============================] - 1379s 4s/step - loss: 0.3243 - ed_loss: 0.7760 - sd_loss: 0.0232 - ed_mean_absolute_error: 0.1023 - sd_f1_score: 0.1565\n",
            "\n",
            "Epoch 00003: loss improved from 0.35191 to 0.32433, saving model to /gdrive/MyDrive/kettle.ckpt\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Found untraced functions such as gru_cell_1_layer_call_and_return_conditional_losses, gru_cell_1_layer_call_fn, gru_cell_2_layer_call_and_return_conditional_losses, gru_cell_2_layer_call_fn, gru_cell_4_layer_call_and_return_conditional_losses while saving (showing 5 of 20). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/kettle.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/kettle.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 4/5\n",
            "314/314 [==============================] - 1383s 4s/step - loss: 0.3255 - ed_loss: 0.7844 - sd_loss: 0.0195 - ed_mean_absolute_error: 0.0997 - sd_f1_score: 0.0835\n",
            "\n",
            "Epoch 00004: loss did not improve from 0.32433\n",
            "Epoch 5/5\n",
            "314/314 [==============================] - 1374s 4s/step - loss: 0.2870 - ed_loss: 0.6890 - sd_loss: 0.0190 - ed_mean_absolute_error: 0.0960 - sd_f1_score: 0.2343\n",
            "\n",
            "Epoch 00005: loss improved from 0.32433 to 0.28700, saving model to /gdrive/MyDrive/kettle.ckpt\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Found untraced functions such as gru_cell_1_layer_call_and_return_conditional_losses, gru_cell_1_layer_call_fn, gru_cell_2_layer_call_and_return_conditional_losses, gru_cell_2_layer_call_fn, gru_cell_4_layer_call_and_return_conditional_losses while saving (showing 5 of 20). These functions will not be directly callable after loading.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/kettle.ckpt/assets\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:tensorflow:Assets written to: /gdrive/MyDrive/kettle.ckpt/assets\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mEsT25spNEqs",
        "outputId": "16a658fb-f624-4f77-d7b7-8620ec5fd84d"
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model_3\"\n",
            "__________________________________________________________________________________________________\n",
            "Layer (type)                    Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            "input_1 (InputLayer)            [(None, 128, 2)]     0                                            \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_3 (Conv1D)               (None, 128, 16)      112         input_1[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "bidirectional_6 (Bidirectional) (None, 128, 256)     112128      conv1d_3[0][0]                   \n",
            "__________________________________________________________________________________________________\n",
            "bidirectional_7 (Bidirectional) (None, 128, 512)     789504      bidirectional_6[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "dense_3 (Dense)                 (None, 128, 128)     65664       bidirectional_7[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "ed (Dense)                      (None, 128, 1)       129         dense_3[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "sd (Dense)                      (None, 128, 1)       129         dense_3[0][0]                    \n",
            "==================================================================================================\n",
            "Total params: 967,666\n",
            "Trainable params: 967,666\n",
            "Non-trainable params: 0\n",
            "__________________________________________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 159
        },
        "id": "mBE1t3r0NEqs",
        "outputId": "d451a389-e7bb-4beb-8ee9-d0667efb6221"
      },
      "source": [
        "#plotting loss metrics \n",
        "import matplotlib.pyplot as plot\n",
        "plot.subplot(3,1,2)\n",
        "plot.plot(history.history['loss'])\n",
        "plot.plot(history.history['ed_loss'])\n",
        "plot.plot(history.history['sd_loss'])\n",
        "plot.title('model loss')\n",
        "plot.ylabel('loss')\n",
        "plot.xlabel('epoch')\n",
        "plot.legend(['overall', 'ed','sd'], loc='upper right')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f262830ab90>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 194
        },
        "id": "KOTG_jS0NEqs",
        "outputId": "ac13c137-5867-4e86-bd3a-d79bd0b910c4"
      },
      "source": [
        "#plotting metrics\n",
        "plot.subplot(2,1,2)\n",
        "plot.plot(history.history['ed_mean_absolute_error'])\n",
        "plot.plot(history.history['sd_f1_score'])\n",
        "plot.title('model loss')\n",
        "plot.ylabel('metric score')\n",
        "plot.xlabel('epoch')\n",
        "plot.legend(['MAE', 'F1'], loc='upper right')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f2626c481d0>"
            ]
          },
          "metadata": {},
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n6Wrmm1XNEqt",
        "outputId": "0716299e-f10e-4046-ab08-f46b960f487d"
      },
      "source": [
        "result = model.evaluate(test_dataset)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "135/135 [==============================] - 204s 2s/step - loss: 0.2711 - ed_loss: 0.6464 - sd_loss: 0.0208 - ed_mean_absolute_error: 0.1050 - sd_f1_score: 0.0000e+00\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zDpyadKTNEqt",
        "outputId": "50c0502a-0a8c-4d15-9ce8-b603305136ea"
      },
      "source": [
        "dict(zip(model.metrics_names, result))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'ed_loss': 0.6464377641677856,\n",
              " 'ed_mean_absolute_error': 0.10497784614562988,\n",
              " 'loss': 0.2710680067539215,\n",
              " 'sd_f1_score': 0.0,\n",
              " 'sd_loss': 0.02082149125635624}"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I0Y_Or6YNEqt",
        "outputId": "9275770a-2b36-49c2-b65d-806a131b1bd3"
      },
      "source": [
        "pred = model.predict(testdata,verbose=1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/tensorflow/python/data/ops/dataset_ops.py:4212: UserWarning: Even though the `tf.config.experimental_run_functions_eagerly` option is set, this option does not apply to tf.data functions. To force eager execution of tf.data functions, please use `tf.data.experimental.enable_debug_mode()`.\n",
            "  \"Even though the `tf.config.experimental_run_functions_eagerly` \"\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "420/420 [==============================] - 381s 907ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 194
        },
        "id": "_FYOm37tNEqt",
        "outputId": "aed61984-d4f6-47ed-9f74-3e67a420351a"
      },
      "source": [
        "import matplotlib.pyplot as plot\n",
        "\n",
        "# pred[0] = (pred[0]*w.std())+w.mean()\n",
        "# wtest = (wtest*w.std())+w.mean()\n",
        "# atest = (atest*a.std())+a.mean()\n",
        "\n",
        "pred[1] = (pred[1]>0.5).astype(np.float)\n",
        "predicted = pred[0] * pred[1]\n",
        "plot.subplot(2,1,2)\n",
        "plot.plot(ktest.flatten())\n",
        "plot.plot(predicted.flatten())\n",
        "#plot.plot(atest.flatten())\n",
        "plot.title('predicted vs actual')\n",
        "plot.ylabel('Active Power (W)')\n",
        "plot.xlabel('Sample number')\n",
        "plot.legend([ 'actual','predicted',], loc='upper right')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f2626def450>"
            ]
          },
          "metadata": {},
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YU56r90ZNEqu"
      },
      "source": [
        "import os\n",
        "import tensorflow_addons as tfa\n",
        "checkpoint = '/gdrive/MyDrive/kettle.ckpt'\n",
        "cdir = os.path.dirname(checkpoint)\n",
        "latest = tf.train.latest_checkpoint(cdir)\n",
        "from tensorflow import keras\n",
        "model = keras.models.load_model('/gdrive/MyDrive/kettle.ckpt',custom_objects={\"f1_score\":tfa.metrics.F1Score})"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PsdA6S_PvaN4"
      },
      "source": [
        "# **Other Things:(Nothing to do here)**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NuL8gXinV528"
      },
      "source": [
        "# **Extracting variables**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i4UdZTeO_Ut_",
        "outputId": "efa33e51-de0b-4851-a4e0-827efabd82a4"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/gdrive')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /gdrive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9cicXS8Yagp7"
      },
      "source": [
        "Appliances:\n",
        "Appliance 2 - Washing Machine\n",
        "Appliance 3 - Dishwasher\n",
        "Appliance 5 - Microwave\n",
        "Appliance 8  - Kettle \n",
        "Appliance 6  - Toaster\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xDf4Z-ZYaP0b"
      },
      "source": [
        "import csv\n",
        "\n",
        "import pandas as pd\n",
        "\n",
        "\n",
        "\n",
        "w , d , m , k , t , time , a = [],[],[],[],[],[],[] #To record load values\n",
        "wb , db , mb , kb , tb = [],[],[],[],[]        #To record when the load is off or on \n",
        "\n",
        "\n",
        "mycsv = pd.read_csv('/gdrive/MyDrive/CLEAN_House2.csv')\n",
        "time,a,w,d,m,k,t =  mycsv['Unix'],mycsv['Aggregate'],mycsv['Appliance2'],mycsv['Appliance3'],mycsv['Appliance5'],mycsv['Appliance6'],mycsv['Appliance8']\n",
        "for i in range(len(time)):\n",
        "            wb.append(1) if int(w[i])>0 else wb.append(0)\n",
        "            db.append(1) if int(d[i]) >0 else db.append(0)\n",
        "            mb.append(1) if int(m[i]) >0 else mb.append(0)\n",
        "            kb.append(1) if int(k[i]) >0 else kb.append(0)\n",
        "            tb.append(1) if int(t[i]) >0 else tb.append(0)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r8TI94POM9dg",
        "outputId": "adcf4447-2d42-4dba-f3aa-bec85d0859e2"
      },
      "source": [
        "len(d) == len(db)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9Ebr6X2UWJqD"
      },
      "source": [
        "# **Preprocessing**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T9epb2zxBWL3"
      },
      "source": [
        "def stan(a):\n",
        "  return (a-a.mean())/a.std()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "__k9Ix4F_Cru"
      },
      "source": [
        "a = stan(a)\n",
        "w = stan(w)\n",
        "d = stan(d)\n",
        "m = stan(m)\n",
        "k = stan(k)\n",
        "t = stan(t)\n",
        "tim = stan(time)\n",
        "wb = pd.Series(wb)\n",
        "mb = pd.Series(mb)\n",
        "kb = pd.Series(kb)\n",
        "tb = pd.Series(tb)\n",
        "db = pd.Series(db)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NRBjAyk7Nadh",
        "outputId": "a82fab70-064f-4c4d-947d-05fe7a4a67a6"
      },
      "source": [
        "len(d) == len(db)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i20hWCLCCmj9"
      },
      "source": [
        "#splitting the data\n",
        "train = 4013468\n",
        "wt = w.iloc[0:train]\n",
        "dt = d.iloc[0:train]\n",
        "mt = m.iloc[0:train]\n",
        "kt = k.iloc[0:train]\n",
        "tt = t.iloc[0:train]\n",
        "timt = tim.iloc[0:train]\n",
        "at = a.iloc[0:train]\n",
        "wbt = wb.iloc[0:train]\n",
        "dbt = db.iloc[0:train]\n",
        "mbt = mb.iloc[0:train]\n",
        "kbt = kb.iloc[0:train]\n",
        "tbt = tb.iloc[0:train]\n",
        "wte = w.iloc[train:]\n",
        "dte = d.iloc[train:]\n",
        "mte = m.iloc[train:]\n",
        "kte = k.iloc[train:]\n",
        "tte = t.iloc[train:]\n",
        "timte = tim.iloc[train:]\n",
        "ate = a.iloc[train:]\n",
        "wbte = wb.iloc[train:]\n",
        "dbte = db.iloc[train:]\n",
        "mbte = mb.iloc[train:]\n",
        "kbte = kb.iloc[train:]\n",
        "tbte = tb.iloc[train:]\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NiX49Zc5NeMS",
        "outputId": "e672c065-e10f-49d8-c9b9-8a5564e9fc60"
      },
      "source": [
        "len(dt) == len(dbt)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "prwgR8GmgdsM"
      },
      "source": [
        "# **Windowing:**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "15XY7KHvWjpr"
      },
      "source": [
        "w = 0\n",
        "wtr ,dtr ,mtr ,ktr ,ttr ,timetr ,atr = [],[],[],[],[],[],[]   #To window load data during training\n",
        "wbtr ,dbtr ,mbtr ,kbtr ,tbtr =[],[],[],[],[]       #To window load binary during training\n",
        "wtest ,dtest ,mtest ,ktest ,ttest ,timetest ,atest = [],[],[],[],[],[],[]   #To window load data during testing\n",
        "wbtest ,dbtest ,mbtest ,kbtest ,tbtest =[],[],[],[],[]       #To window load binary during testing\n",
        "\n",
        "\n",
        "while(w<train-512):\n",
        "  timetr.append(timt.iloc[w:w+512]) \n",
        "  atr.append(at.iloc[w:w+512])\n",
        "  dtr.append(dt.iloc[w:w+512])\n",
        "  wtr.append(wt.iloc[w:w+512])\n",
        "  dbtr.append(dbt.iloc[w:w+512])\n",
        "  wbtr.append(wbt.iloc[w:w+512])\n",
        "  if w<(1720058-512):\n",
        "    timetest.append(timte.iloc[w:w+512]) \n",
        "    atest.append(ate.iloc[w:w+512])\n",
        "    dtest.append(dte.iloc[w:w+512])\n",
        "    wtest.append(wte.iloc[w:w+512])\n",
        "    dbtest.append(dbte.iloc[w:w+512])\n",
        "    wbtest.append(wbte.iloc[w:w+512])\n",
        "  w += 512\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YNSAHSo0NmXq",
        "outputId": "f0bdc9ba-9742-4fb6-840e-751b6feded72"
      },
      "source": [
        "np.shape(dtr) == np.shape(dbtr)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8bP1COp2jtXJ"
      },
      "source": [
        "from sklearn.utils import shuffle\n",
        "timetr,atr,dtr,wtr,dbtr,wbtr = shuffle(timetr,atr,dtr,wtr,dbtr,wbtr, random_state=0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Da-lDfJkNyS7",
        "outputId": "2a392bd4-475c-4b70-a6ab-4150abc1283d"
      },
      "source": [
        "np.shape(dtr) == np.shape(dbtr)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Parpsp9I0c7z"
      },
      "source": [
        "import numpy as np\n",
        "np.savez_compressed('/gdrive/MyDrive/washdish',timetr,atr,dtr,wtr,dbtr,wbtr)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ByCZIn1xjEFt"
      },
      "source": [
        "from sklearn.utils import shuffle\n",
        "timetest,atest,dtest,wtest,dbtest,wbtest = shuffle(timetest,atest,dtest,wtest,dbtest,wbtest, random_state=0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eXceNHymlUHr"
      },
      "source": [
        "import numpy as np\n",
        "np.savez_compressed('/gdrive/MyDrive/washdishtest',timetest,atest,dtest,wtest,dbtest,wbtest)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iAHr0fcCkr9K"
      },
      "source": [
        "fil = np.load('/gdrive/MyDrive/washdish.npz',allow_pickle=True)\n",
        "\n",
        "timetr,atr,dtr,wtr,dbtr,wbtr = fil['arr_0'],fil['arr_1'],fil['arr_2'],fil['arr_3'],fil['arr_4'],fil['arr_5']\n",
        "\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yQoOuIQslORA"
      },
      "source": [
        "w = 0\n",
        "timetr , atr , mbtr ,kbtr ,tbtr , mtr ,ktr ,ttr =[],[],[],[],[],[],[],[]\n",
        "timetest , atest , mbtest ,kbtest ,tbtest , mtest ,ktest ,ttest =[],[],[],[],[],[],[],[]\n",
        "while(w<train-128):\n",
        "  timetr.append(timt[w:w+128]) \n",
        "  atr.append(at[w:w+128])\n",
        "  mtr.append(mt[w:w+128])\n",
        "  ktr.append(kt[w:w+128])\n",
        "  ttr.append(tt[w:w+128])\n",
        "  mbtr.append(mbt[w:w+128])\n",
        "  kbtr.append(kbt[w:w+128])\n",
        "  tbtr.append(tbt[w:w+128])\n",
        "  if w<(1720058-127):\n",
        "    timetest.append(timt[w:w+128]) \n",
        "    atest.append(at[w:w+128])\n",
        "    mtest.append(mt[w:w+128])\n",
        "    ktest.append(kt[w:w+128])\n",
        "    ttest.append(tt[w:w+128])\n",
        "    mbtest.append(mbt[w:w+128])\n",
        "    kbtest.append(kbt[w:w+128])\n",
        "    tbtest.append(tbt[w:w+128])\n",
        "  w += 128\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yc2QMcQ6r7zl"
      },
      "source": [
        "from sklearn.utils import shuffle\n",
        "timetr , atr , mbtr ,kbtr ,tbtr , mtr ,ktr ,ttr = shuffle(timetr , atr , mbtr ,kbtr ,tbtr , mtr ,ktr ,ttr, random_state=0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YypBft0Hm4Uu"
      },
      "source": [
        "timetest , atest , mbtest ,kbtest ,tbtest , mtest ,ktest ,ttest = shuffle(timetest , atest , mbtest ,kbtest ,tbtest , mtest ,ktest ,ttest,random_state=0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lmnokpOfZgLT"
      },
      "source": [
        "np.savez_compressed('/gdrive/MyDrive/toastmicro',timetr , atr , mbtr ,kbtr ,tbtr , mtr ,ktr ,ttr)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FSk59JqunWbg"
      },
      "source": [
        "np.savez_compressed('/gdrive/MyDrive/toastmicrotest',timetest , atest , mbtest ,kbtest ,tbtest , mtest ,ktest ,ttest)"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}